const winston = require('winston');
require('winston-daily-rotate-file');
const LokiTransport = require('winston-loki');
const util = require('util');

const defaultOptions = {
  env: 'development',
  serviceName: 'app',
  LOKI_HOST: 'http://localhost:3100',
};

//  custom stringifier for bigint, circular references
const customStringify = (obj) => {
  const seen = new WeakSet();
  return JSON.stringify(obj, (key, value) => {
    if (typeof value === 'bigint') {
      return value.toString() + 'n';
    }
    if (typeof value === 'object' && value !== null) {
      if (seen.has(value)) {
        return '[Circular Reference]';
      }
      seen.add(value);
    }
    return value;
  });
};

const createLogger = (userOptions = {}) => {
  const options = { ...defaultOptions, ...userOptions };

  const fileTransport = new winston.transports.DailyRotateFile({
    filename: `./log/${options.serviceName}-%DATE%.log`,
    datePattern: 'YYYY-MM-DD',
    zippedArchive: true,
    maxSize: '20m',
    maxFiles: '30d',
    format: winston.format.uncolorize(),
  });

  const enumerateErrorFormat = winston.format((info) => {
    if (info instanceof Error) {
      Object.assign(info, { message: info.stack });
    }
    return info;
  });

  const customSplatFormat = winston.format((info) => {
    const splatArgs = info[Symbol.for('splat')] || [];
    
    if (splatArgs.length > 0) {
      if (info.message.includes('%')) {
        info.message = util.format(info.message, ...splatArgs);
      } else {
        const formattedArgs = splatArgs.map(arg =>{ 
          let stringified;
          if(typeof arg === 'object'){
            stringified = customStringify(arg)
          }
          else if(typeof arg === 'bigint'){
            stringified = arg.toString() + 'n';
          }
          else{
            stringified = String(arg)
          }
          return stringified;
        }).join(' ');
        if (formattedArgs) {
          info.message = `${info.message} ${formattedArgs}`;
        }
      }
    }
    
    Object.keys(info).forEach(key => {
      if (!['message', 'level', 'timestamp'].includes(key)) {
        delete info[key];
      }
    });
    
    return info;
  });

  const transports = [
    new winston.transports.Console({
      stderrLevels: ['error'],
    }),
    fileTransport,
  ];

  if (options.loki) {
    const defaultLokiConfig = {
      host: options.LOKI_HOST,
      labels: { app: options.serviceName },
      json: true,
      format: winston.format.json(),
      replaceTimestamp: false,
      level: options.env === 'development' ? 'debug' : 'info',
    };

    const lokiConfig = { ...defaultLokiConfig, ...options.loki };

    transports.push(new LokiTransport(lokiConfig));
  }

  const winstonLogger = winston.createLogger({
    level: options.env === 'development' ? 'debug' : 'info',
    format: winston.format.combine(
      enumerateErrorFormat(),
      customSplatFormat(),
      options.env === 'development'
        ? winston.format.colorize()
        : winston.format.uncolorize(),
      winston.format.timestamp({ format: 'YYYY-MM-DD hh:mm:ss.SSS A' }),
      winston.format.printf(({ level, message, timestamp, metadata }) => {
        let logMessage = `[${timestamp}] ${level}: ${message}`;
        if (metadata && Object.keys(metadata).length > 0) {
          logMessage += ` ${customStringify(metadata)}`;
        }
        return logMessage;
      })
    ),
    transports: transports
  });
  

  return winstonLogger;
};

module.exports = createLogger;
