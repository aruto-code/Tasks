const { createApp, createRouter, wrapAsync } = require('./app');
const logger = require('./config/logger');
const { errorMiddleware, ApiError } = require('./middlewares/error');
const httpStatus = require('http-status');
const { apiClient, getClientIp } = require('./utils');
const moment = require('moment');
const { getMetricsRegistry, promClient } = require('./monitoring/metrics');
const _ = require('lodash');

const unexpectedErrorHandler = (error) => {
  logger.error('unexpectedErrorHandler %s', error);
  process.exit(1);
};

const unhandledRejectionHandler = (reason, promise) => {
  logger.error(`Unhandled Rejection at: %s , reason: ${reason}`, promise);
};

process.on('uncaughtException', unexpectedErrorHandler);
process.on('unhandledRejection', unhandledRejectionHandler);

module.exports = {
  createApp,
  createRouter,
  wrapAsync,
  ApiError,
  errorMiddleware,
  logger,
  httpStatus,
  apiClient,
  moment,
  getClientIp,
  getMetricsRegistry,
  promClient,
  _,
};
