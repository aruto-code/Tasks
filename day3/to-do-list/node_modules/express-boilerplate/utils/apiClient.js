const axios = require('axios');
const axiosRetry = require('axios-retry').default;
const config = require('../config/config');
const logger = require('../config/logger');

const axiosInstance = axios.create({
  baseURL: config.externalServiceUrl,
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json',
    Accept: 'application/json',
  },
});

axiosRetry(axiosInstance, {
  retries: 2,
  retryCondition: (e) => {
    return axiosRetry.isNetworkOrIdempotentRequestError(e) || e.response.status === 429;
  },
  retryDelay: (retryCount, error) => {
    if (error.response && error.response.headers['retry-after']) {
      const retryAfter = error.response.headers['retry-after'];

      const retryAfterSeconds = parseInt(retryAfter, 10);
      if (!Number.isNaN(retryAfterSeconds)) {
        logger.info(`Using Retry-After value in seconds: ${retryAfterSeconds}`);
        return retryAfterSeconds * 1000;
      }

      const retryAfterDate = Date.parse(retryAfter);
      if (!isNaN(retryAfterDate)) {
        const delay = retryAfterDate - new Date();
        if (delay > 0) {
          logger.info(`Using Retry-After date: ${new Date(retryAfterDate).toISOString()}`);
          return delay;
        }
      }
    }

    return axiosRetry.exponentialDelay(retryCount, error);
  },
  onRetry: (retryCount, error, requestConfig) => {
    logger.warn(
      `Retry attempt ${retryCount} for ${requestConfig.method.toUpperCase()} ${requestConfig.url}`
    );
    if (error.response) {
      logger.error(
        `Error Response for ${requestConfig.method.toUpperCase()} ${requestConfig.url} Status Code: ${error.response?.status}, Message: ${error.response?.statusText}`
      );
    } else {
      logger.error(
        `Error in retrying for ${requestConfig.method.toUpperCase()} ${requestConfig.url} : ${error.message}`
      );
    }
  },
});

module.exports = axiosInstance;
