require('./monitoring/tracing');
const express = require('express');
const cors = require('cors');
const httpStatus = require('http-status');
const asyncHandler = require('express-async-handler');
const morgan = require('./config/morgan');

const { errorConverter, errorHandler, ApiError } = require('./middlewares/error');
const { registerPromMetrics } = require('./monitoring/metrics');
const { healthCheck } = require('./monitoring/healthCheck');
const { getClientIp } = require('./utils');
const os = require('os');
const config = require('./config/config');
const httpMetricsMiddleware = require('./monitoring/httpmetricsMiddleware');

function setupMiddleware(app, options = {}) {
  const corsOptions = options.corsOptions || { origin: true, credentials: true };
  app.use(cors(corsOptions));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(httpMetricsMiddleware);

  if (Array.isArray(options.middlewares)) {
    options.middlewares.forEach((middleware) => {
      app.use(middleware);
    });
  }

  if (config.env !== 'test') {
    app.use(morgan.successHandler);
    app.use(morgan.errorHandler);
  }
}

function notFoundHandler(req, res, next) {
  next(new ApiError(httpStatus.NOT_FOUND, 'Not found'));
}

function createApp(options = {}) {
  const app = express();

  setupMiddleware(app, options);

  app.get('/favicon.ico', (req, res) => res.sendStatus(204));
  app.get('/ping', healthCheck);
  app.set('trust proxy', 1);
  const ALLOWED_IPS = options.metricsAllowedIps || config.metricsAllowedIps || [];
  app.get('/metrics', (req, res) => {
    const clientIp = getClientIp(req);
    if (!ALLOWED_IPS.includes(clientIp)) {
      return res.status(403).json({ message: 'Access denied' });
    }

    registerPromMetrics(req, res);
  });

  if (options.routes) {
    app.use(options.routePrefix || '/', options.routes);
  }

  app.get('/', (req, res) => {
    res.json({
      timestamp: Date.now(),
      hostname: os.hostname(),
      serviceId: config.serviceId,
    });
  });

  app.use(notFoundHandler);
  app.use(errorConverter);
  app.use(errorHandler);

  return app;
}

function createRouter() {
  return express.Router();
}

function wrapAsync(fn) {
  return asyncHandler(fn);
}

module.exports = { createApp, createRouter, wrapAsync };
