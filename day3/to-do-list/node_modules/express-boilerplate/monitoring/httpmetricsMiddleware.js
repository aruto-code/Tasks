const { promClient, getMetricsRegistry } = require('./metrics');

const register = getMetricsRegistry();

const Histogram = promClient.Histogram;
const Gauge = promClient.Gauge;
const Counter = promClient.Counter;

const requestDuration = new Histogram({
  name: 'http_request_duration_seconds',
  help: 'Request duration histogram',
  labelNames: ['handler', 'method', 'statuscode'],
  buckets: [0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5, 10],
});

const httpRequestsGauge = new Gauge({
  name: 'http_requests_total',
  help: 'Total HTTP requests',
  labelNames: ['method', 'route'],
});

const httpRequestsErrorsCounter = new Counter({
  name: 'http_requests_errors_total',
  help: 'Total HTTP errors',
  labelNames: ['method', 'route', 'statuscode'],
});

const httpRequestsActive = new Gauge({
  name: 'http_requests_active',
  help: 'Number of active HTTP requests',
});

const requestSize = new Histogram({
  name: 'http_request_size_bytes',
  help: 'Histogram of HTTP request sizes',
  labelNames: ['method', 'route'],
  buckets: [200, 500, 1000, 2000, 5000],
});

const responseSize = new Histogram({
  name: 'http_response_size_bytes',
  help: 'Histogram of HTTP response sizes',
  labelNames: ['method', 'route'],
  buckets: [200, 500, 1000, 2000, 5000],
});

[
  requestDuration,
  httpRequestsGauge,
  httpRequestsErrorsCounter,
  httpRequestsActive,
  requestSize,
  responseSize,
].forEach((metric) => register.registerMetric(metric));

const httpMetricsMiddleware = (req, res, next) => {
  const start = Date.now();

  httpRequestsActive.inc();

  const contentLength = req.get('content-length') || 0;
  if (contentLength > 0) {
    requestSize.labels(req.method, req.url).observe(Number(contentLength));
  }

  res.on('finish', () => {
    const duration = Date.now() - start;
    requestDuration.labels(req.url, req.method, res.statusCode).observe(duration / 1000);
    httpRequestsGauge.labels(req.method, req.url).inc();

    if (res.statusCode >= 400) {
      httpRequestsErrorsCounter.labels(req.method, req.url, res.statusCode).inc();
    }

    const responseContentLength = res.get('Content-Length') || 0;
    if (responseContentLength > 0) {
      responseSize.labels(req.method, req.url).observe(Number(responseContentLength));
    }

    httpRequestsActive.dec();
  });

  next();
};

module.exports = httpMetricsMiddleware;
