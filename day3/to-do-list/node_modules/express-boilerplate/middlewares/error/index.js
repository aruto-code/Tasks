const httpStatus = require('http-status');
const config = require('../../config/config');
const logger = require('../../config/logger');
const ApiError = require('./ApiError');

const errorConverter = (err, req, res, next) => {
  let error = err;
  if (!(error instanceof ApiError)) {
    let statusCode = httpStatus.INTERNAL_SERVER_ERROR;
    statusCode = error.statusCode ? error.statusCode : statusCode;
    const message = error.message || httpStatus[statusCode];
    const details = error.details || {};
    error = new ApiError(statusCode, message, details, false, err.stack);
  }
  next(error);
};

const errorHandler = (err, req, res, next) => {
  let statusCode = err.statusCode || err.status || httpStatus.INTERNAL_SERVER_ERROR;
  let message = err.message || httpStatus[statusCode];
  const details = err.details || {};

  if (config.env === 'production' && !err.isOperational) {
    statusCode = httpStatus.INTERNAL_SERVER_ERROR;
    message = httpStatus[statusCode];
  }

  const response = {
    code: statusCode,
    message,
    details,
    ...(config.env === 'development' && { stack: err.stack }),
  };

  res.locals.errorMessage = err.message;
  logger.error(err);

  res.status(statusCode).send(response);

  next();
};

const errorMiddleware = {
  errorConverter,
  errorHandler,
  ApiError,
};

module.exports = {
  errorConverter,
  errorHandler,
  ApiError,
  errorMiddleware,
};
