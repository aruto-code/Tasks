const Joi = require('joi');

const envVarsSchema = Joi.object()
  .keys({
    NODE_ENV: Joi.string()
      .valid(
        'development',
        'staging-sandbox',
        'sandbox',
        'staging-production',
        'production',
        'test'
      )
      .required(),
    SERVICE_IDENTIFIER: Joi.string().required().default('avigate_express'),
    METRICS_ALLOWED_IPS: Joi.string()
      .default('127.0.0.1')
      .description('Comma separated allowed ips for accessing metrics endpoint')
      .required(),
    LOKI_URL: Joi.string().description('Loki URL for logging').required(),
    OPENTELEMETRY_URL: Joi.string()
      .description('Open telemetry url used for Tempo Tracing')
      .required(),
    OTEL_LOGS_EXPORTER: Joi.string()
      .default('otlp')
      .description('Open telemetry log exporter')
      .required(),
    OTEL_EXPORTER_OTLP_ENDPOINT: Joi.string()
      .description('Open telemetry url used for Tempo Tracing')
      .required(),
    EXTERNAL_SERVICE_URL: Joi.string().description('External Service Url to be used in apiClient'),
  })
  .unknown();

const { value: envVars, error } = envVarsSchema
  .prefs({ errors: { label: 'key' } })
  .validate(process.env);

if (error) {
  throw new Error(`Config validation error: ${error.message}`);
}

const config = {
  env: envVars.NODE_ENV,
  serviceId: envVars.SERVICE_IDENTIFIER,
  metricsAllowedIps: envVars.METRICS_ALLOWED_IPS.split(','),
  loki_url: envVars.LOKI_URL,
  otel_url: envVars.OPENTELEMETRY_URL,
  otel_exporter: envVars.OTEL_LOGS_EXPORTER,
  otlp_url: envVars.OTEL_EXPORTER_OTLP_ENDPOINT,
  externalServiceUrl: envVars.EXTERNAL_SERVICE_URL,
};

module.exports = config;
